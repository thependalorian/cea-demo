'use client'

import React, { useState, useEffect } from 'react'
import { Metadata } from 'next'

interface AnalyticsData {
  total_applications: number
  interviews: number
  offers: number
  rejections: number
  recent_activity: Array<{
    date: string
    job_title: string
    company: string
    status: string
  }>
}

export default function JobseekerAnalytics() {
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    const fetchAnalytics = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('/api/v1/analytics?user_type=job_seeker&time_range=30d');
        
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.data) {
            const analyticsData = data.data;
            setAnalytics({
              total_applications: analyticsData.overview?.total_applications || 0,
              interviews: analyticsData.overview?.interviews || 0,
              offers: analyticsData.overview?.offers || 0,
              rejections: 0, // Calculate from applications - interviews - offers when available
              recent_activity: analyticsData.activity_timeline?.map((activity: unknown) => ({
                date: new Date(activity.date).toLocaleDateString(),
                job_title: activity.title || 'Conversation',
                company: activity.agent || 'System',
                status: 'Chat Session'
              })) || []
            });
          }
        } else {
          // Set empty analytics if API fails
          setAnalytics({
            total_applications: 0,
            interviews: 0,
            offers: 0,
            rejections: 0,
            recent_activity: []
          });
        }
        setIsLoading(false);
      } catch (error) {
        console.error('Failed to fetch analytics:', error);
        setIsLoading(false);
      }
    };
    
    fetchAnalytics();
  }, [])

  if (isLoading) {
    return (
      <div className="min-h-screen bg-base-200 flex items-center justify-center">
        <div className="loading loading-spinner loading-lg"></div>
      </div>
    )
  }

  if (!analytics) {
    return (
      <div className="min-h-screen bg-base-200 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">No Analytics Data</h2>
          <p className="text-base-content/70">Start applying to jobs to see your analytics.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-base-200">
      <div className="bg-base-100 shadow-sm">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <h1 className="text-3xl font-bold">My Analytics</h1>
          <p className="text-base-content/70">
            Track your job search performance and progress.
          </p>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-8">
          <div className="stat bg-base-100 shadow-lg rounded-lg">
            <div className="stat-title">Applications</div>
            <div className="stat-value text-primary">{analytics.total_applications}</div>
          </div>
          <div className="stat bg-base-100 shadow-lg rounded-lg">
            <div className="stat-title">Interviews</div>
            <div className="stat-value text-info">{analytics.interviews}</div>
          </div>
          <div className="stat bg-base-100 shadow-lg rounded-lg">
            <div className="stat-title">Offers</div>
            <div className="stat-value text-success">{analytics.offers}</div>
          </div>
          <div className="stat bg-base-100 shadow-lg rounded-lg">
            <div className="stat-title">Rejections</div>
            <div className="stat-value text-error">{analytics.rejections}</div>
          </div>
        </div>

        <div className="card bg-base-100 shadow-xl">
          <div className="card-body">
            <h2 className="card-title mb-4">Recent Activity</h2>
            <div className="overflow-x-auto">
              <table className="table table-zebra">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Job Title</th>
                    <th>Company</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {analytics.recent_activity.map((row, idx) => (
                    <tr key={idx}>
                      <td>{row.date}</td>
                      <td>{row.job_title}</td>
                      <td>{row.company}</td>
                      <td>{row.status}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 