import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'
import type { Database } from '@/types/database'

// Agent API configuration
const AGENT_API_URL = process.env.NEXT_PUBLIC_AGENT_ENDPOINT || 'http://localhost:8001/api/pendo-agent'
const ENABLE_STREAMING = process.env.NEXT_PUBLIC_ENABLE_STREAMING === 'true'

export async function POST(request: Request) {
  try {
    const supabase = createRouteHandlerClient<Database>({ cookies })
    
    // Get request body first
    const body = await request.json()
    const { content, conversation_id, files, api_key } = body

    // Check auth - allow API key based auth for demo purposes
    const { data: { session }, error: authError } = await supabase.auth.getSession()
    
    if ((authError || !session) && !api_key) {
      return NextResponse.json(
        { error: 'Unauthorized - Please provide your API key' },
        { status: 401 }
      )
    }

    if (!content) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Generate conversation_id if not provided (handle demo mode without session)
    const userId = session?.user?.id || null  // Use null for demo mode, not fake user
    const finalConversationId = conversation_id || `conv_${Date.now()}_${Math.random().toString(36).substring(2)}`

    // Create or ensure conversation exists first (required for foreign key constraint)
    let conversation: Database['public']['Tables']['conversations']['Row'] | null = null;
    
    const { data: existingConv } = await supabase
      .from('conversations')
      .select('*')
      .eq('id', finalConversationId)
      .maybeSingle()

    if (existingConv) {
      conversation = existingConv
    } else {
      // Create new conversation
      const { data: newConv, error: convError } = await supabase
        .from('conversations')
        .insert({
          id: finalConversationId,
          user_id: userId,  // null for demo mode
          created_at: new Date().toISOString(),
          last_activity: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          title: content.substring(0, 100),
          // Assuming metadata is a jsonb column that exists
          metadata: { 
            source: 'web', 
            demo_mode: !userId,
            session_id: finalConversationId 
          }
        })
        .select()
        .single()

      if (convError) {
        console.warn('Failed to create conversation:', convError)
      } else {
        conversation = newConv
      }
    }

    // Add user message to database (only if conversation was created successfully)
    if (conversation) {
      const { error: messageError } = await supabase
        .from('conversation_messages')
        .insert({
          // id is auto-generated by the database, no need to create it manually
          conversation_id: finalConversationId,
          user_id: userId,
          content,
          role: 'user',
          created_at: new Date().toISOString(),
          // Assuming metadata is a jsonb column that exists
          metadata: { source: 'web', demo_mode: !userId }
        })

      if (messageError) {
        console.warn('Database message insert failed:', messageError)
      }
    }

    // Prepare request for agent API - Updated for correct backend endpoint structure
    const agentRequest = {
      content: content,  // Backend expects 'content' not 'query'
      user_id: userId || 'demo_user',  // Backend might need a string, not null
      session_id: finalConversationId,
      conversation_id: finalConversationId,
      files: files || [],
      enable_streaming: ENABLE_STREAMING
    }

    // Call agent API
    const agentResponse = await fetch(AGENT_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // DEMO MODE: Use provided API key if session isn't available
        ...(session?.access_token ? { 'Authorization': `Bearer ${session.access_token}` } : {}),
        ...(api_key ? { 'X-OpenAI-API-Key': api_key } : {})
      },
      body: JSON.stringify(agentRequest)
    })

    if (!agentResponse.ok) {
      const errorBody = await agentResponse.text();
      console.error('Agent API error response:', errorBody);
      throw new Error(`Agent API error: ${agentResponse.status} ${agentResponse.statusText}`)
    }

    // Handle streaming response
    if (ENABLE_STREAMING && agentResponse.headers.get('content-type')?.includes('text/event-stream')) {
      const stream = agentResponse.body;
      if (!stream) {
        throw new Error('Agent API streaming response body is null');
      }
      return new Response(stream, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive'
        }
      })
    }

    // Handle regular JSON response
    const agentData = await agentResponse.json()

    // Add assistant message to database (only if conversation exists)
    let assistantMessage = null
    if (conversation && agentData.response) {
      const { data: newAssistantMessage, error: assistantError } = await supabase
        .from('conversation_messages')
        .insert({
          // id is auto-generated by the database
          conversation_id: finalConversationId,
          user_id: userId,
          content: agentData.response,
          role: 'assistant',
          created_at: new Date().toISOString(),
          metadata: { 
            source: 'agent_api',
            session_id: agentData.session_id,
            conversation_id: agentData.conversation_id,
            demo_mode: !userId
          }
        })
        .select()
        .single()

      if (assistantError) {
        console.warn('Failed to save assistant message:', assistantError)
      } else {
        assistantMessage = newAssistantMessage
      }
    }

    // Update conversation activity (only if conversation exists)
    if (conversation) {
      const { error: updateError } = await supabase
        .from('conversations')
        .update({
          last_activity: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          message_count: (conversation.message_count || 0) + 2  // user + assistant messages
        })
        .eq('id', finalConversationId)
      
      if (updateError) {
        console.warn('Failed to update conversation:', updateError);
      }
    }

    return NextResponse.json({
      message: assistantMessage,
      conversation_id: finalConversationId,
      session_id: agentData.session_id
    })

  } catch (error) {
    console.error('Chat API Error:', error)
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

export async function GET(request: Request) {
  try {
    const supabase = createRouteHandlerClient<Database>({ cookies })
    
    // Check auth
    const { data: { session }, error: authError } = await supabase.auth.getSession()
    if (authError || !session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Get conversation ID from query params
    const { searchParams } = new URL(request.url)
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const conversation_id = searchParams.get('conversation_id')

    if (!conversation_id) {
      return NextResponse.json(
        { error: 'Missing conversation_id' },
        { status: 400 }
      )
    }

    // Get messages
    const { data: messages, error: messagesError } = await supabase
      .from('conversation_messages')
      .select('*')
      .eq('conversation_id', conversation_id)
      .order('created_at', { ascending: true })

    if (messagesError) {
      throw messagesError
    }

    return NextResponse.json(messages)
  } catch (error) {
    console.error('Chat API Error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}