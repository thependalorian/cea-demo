#!/usr/bin/env python3
"""
deploy.py

This script deploys the Pendo Climate Economy Assistant stack with different configurations:
- Local: Integrates with existing AI stack (no Caddy, uses overrides for existing Caddy)
- Cloud: Standalone deployment with its own Caddy reverse proxy

Usage:
  python deploy.py --type local --project pendo-cea    # Join existing AI stack
  python deploy.py --type cloud                        # Standalone cloud deployment  
  python deploy.py --down --type local --project pendo-cea  # Stop services
"""

import argparse
import subprocess
import sys
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def run_command(cmd, cwd=None):
    """Run a shell command and print it."""
    print("Running:", " ".join(cmd))
    try:
        subprocess.run(cmd, cwd=cwd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Command failed with exit code {e.returncode}")
        sys.exit(1)

def validate_environment():
    """Check that required files exist."""
    required_files = ["docker-compose.yml"]
    
    for file in required_files:
        if not os.path.exists(file):
            print(f"Error: Required file '{file}' not found in current directory")
            sys.exit(1)

def validate_environment_variables(deployment_type):
    """Check that required environment variables are set."""
    required_vars = [
        "SUPABASE_URL",
        "SUPABASE_SERVICE_KEY",
        "NEXT_PUBLIC_SUPABASE_URL", 
        "NEXT_PUBLIC_SUPABASE_ANON_KEY"
    ]
    
    if deployment_type == "cloud":
        required_vars.extend([
            "LETSENCRYPT_EMAIL",
            "AGENT_API_HOSTNAME",
            "RAG_API_HOSTNAME", 
            "FRONTEND_HOSTNAME"
        ])
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"Error: Missing required environment variables: {', '.join(missing_vars)}")
        print("Please set these variables or create a .env file")
        sys.exit(1)

def deploy_pendo_stack(deployment_type, project_name, action="up"):
    """Deploy or stop the Pendo CEA stack based on deployment type."""
    
    # Build base command
    cmd = ["docker", "compose", "-p", project_name, "-f", "docker-compose.yml"]
    
    # Add deployment-specific compose files
    if deployment_type == "cloud":
        if not os.path.exists("docker-compose.caddy.yml"):
            print("Error: docker-compose.caddy.yml not found for cloud deployment")
            sys.exit(1)
        cmd.extend(["-f", "docker-compose.caddy.yml"])
        print(f"Cloud deployment: Including Caddy service")
        
    elif deployment_type == "local":
        print(f"Local deployment: Deploying Pendo CEA services to join AI stack network")
    
    else:
        print(f"Error: Invalid deployment type '{deployment_type}'")
        sys.exit(1)
    
    # Add action (up/down)
    if action == "up":
        cmd.append("up")
        cmd.extend(["-d", "--build"])
        print(f"Deploying Pendo CEA stack...")
        
    elif action == "down":
        cmd.append("down")
        print(f"Stopping Pendo CEA stack...")
        
    else:
        print(f"Error: Invalid action '{action}'")
        sys.exit(1)
    
    # Run the command
    run_command(cmd)
    
    if action == "up":
        print(f"\n‚úÖ Pendo CEA deployment completed!")
        
        if deployment_type == "cloud":
            print(f"üåê Services will be available at:")
            print(f"   Frontend: https://{os.getenv('FRONTEND_HOSTNAME', 'cea.georgenekwaya.com')}")
            print(f"   Agent API: https://{os.getenv('AGENT_API_HOSTNAME', 'your-agent-api-domain.com')}")
            print(f"   RAG Pipeline API: https://{os.getenv('RAG_API_HOSTNAME', 'your-rag-api-domain.com')}")
            print(f"üìã Note: SSL certificates will be automatically generated by Let's Encrypt")
            
        elif deployment_type == "local":
            print(f"üñ•Ô∏è  Services available locally at:")
            print(f"   Frontend: http://localhost:8082")
            print(f"   Agent API: http://localhost:8001")
            print(f"   RAG Pipeline API: http://localhost:8000")
            
    elif action == "down":
        print(f"\n‚úÖ Pendo CEA stack stopped successfully!")

def show_logs(project_name, service=None):
    """Show logs for the deployment."""
    cmd = ["docker", "compose", "-p", project_name, "logs"]
    
    if service:
        cmd.append(service)
        print(f"Showing logs for service: {service}")
    else:
        print("Showing logs for all services")
        
    cmd.extend(["-f", "--tail=100"])
    
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print("\nStopped following logs")

def show_status(project_name):
    """Show status of all services."""
    cmd = ["docker", "compose", "-p", project_name, "ps"]
    run_command(cmd)

def main():
    parser = argparse.ArgumentParser(description="Deploy Pendo Climate Economy Assistant")
    parser.add_argument("--type", choices=["local", "cloud"], required=True,
                        help="Deployment type")
    parser.add_argument("--project", default="pendo-cea",
                        help="Docker Compose project name (default: pendo-cea)")
    parser.add_argument("--down", action="store_true",
                        help="Stop the deployment instead of starting it")
    parser.add_argument("--logs", action="store_true",
                        help="Show logs instead of deploying")
    parser.add_argument("--service", 
                        help="Show logs for specific service only")
    parser.add_argument("--status", action="store_true",
                        help="Show status of services")
    
    args = parser.parse_args()
    
    # Validate environment
    validate_environment()
    
    if args.logs:
        show_logs(args.project, args.service)
        return
        
    if args.status:
        show_status(args.project)
        return
    
    # Validate environment variables
    validate_environment_variables(args.type)
    
    # Deploy or stop
    action = "down" if args.down else "up"
    deploy_pendo_stack(args.type, args.project, action)

if __name__ == "__main__":
    main() 